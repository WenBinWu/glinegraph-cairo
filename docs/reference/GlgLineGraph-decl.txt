<MACRO>
<NAME>GLG_USER_MODEL_X</NAME>
#define GLG_USER_MODEL_X 570     /* Minimum width */
</MACRO>
<MACRO>
<NAME>GLG_USER_MODEL_Y</NAME>
#define GLG_USER_MODEL_Y 270     /* Minimum height */
</MACRO>
<MACRO>
<NAME>GLG_MAX_STRING</NAME>
#define GLG_MAX_STRING  256      /* Size of a text string */
</MACRO>
<STRUCT>
<NAME>GlgLineGraphClass</NAME>
struct _GlgLineGraphClass
{
    GtkWidgetClass parent_class;

	void	(* point_selected)	(GlgLineGraph *graph, double x_value, double y_value, double point_y_pos, double mouse_y_pos);
    /* Padding for future expansion */
    void (*_glg_reserved1) (void);
    void (*_glg_reserved2) (void);
    void (*_glg_reserved3) (void);
    void (*_glg_reserved4) (void);
};
</STRUCT>
<STRUCT>
<NAME>GlgLineGraph</NAME>
struct _GlgLineGraph
{
	GtkWidget parent;

	/* < private > */
	GlgLineGraphPrivate *priv;
};
</STRUCT>
<ENUM>
<NAME>GLGElementID</NAME>
typedef enum _GLG_Graph_Elements {
  /* enable chart flags and title keys */
  GLG_ELEMENT_NONE = 1 << 0,
  GLG_TITLE_X = 1 << 1,
  GLG_NO_TITLE_X = 0 << 1,
  GLG_TITLE_Y = 1 << 2,
  GLG_NO_TITLE_Y = 0 << 2,
  GLG_TITLE_T = 1 << 3,
  GLG_NO_TITLE_T = 0 << 3,

  /* enable chart attributes flag */  
  GLG_GRID_LABELS_X = 1 << 4,
  GLG_NO_GRID_LABELS_X = 0 << 4,
  GLG_GRID_LABELS_Y = 1 << 5,
  GLG_NO_GRID_LABELS_Y = 0 << 5,

  /* enable tooltip flag */
  GLG_TOOLTIP = 1 << 6,
  GLG_NO_TOOLTIP = 0 << 6,  
  
  /* enabled chart attributes */
  GLG_GRID_LINES   = 1 << 7,
  GLG_NO_GRID_LINES   = 0 << 7,
  GLG_GRID_MINOR_X = 1 << 8,
  GLG_NO_GRID_MINOR_X = 0 << 8,
  GLG_GRID_MAJOR_X = 1 << 9,
  GLG_NO_GRID_MAJOR_X = 0 << 9,
  GLG_GRID_MINOR_Y = 1 << 10,
  GLG_NO_GRID_MINOR_Y = 0 << 10,
  GLG_GRID_MAJOR_Y = 1 << 11,
  GLG_NO_GRID_MAJOR_Y = 0 << 11,
  
  /* chart color key -- used to change window color only */
  GLG_SCALE   = 1 << 12,  
  GLG_TITLE   = 1 << 13,
  GLG_WINDOW  = 1 << 14,  
  GLG_CHART   = 1 << 15, 

  /* Reserved */   
  GLG_RESERVED_OFF = 0 << 16,
  GLG_RESERVED_ON  = 1 << 16      
} GLGElementID;
</ENUM>
<MACRO>
<NAME>GLG_TYPE_LINE_GRAPH</NAME>
#define GLG_TYPE_LINE_GRAPH			(glg_line_graph_get_type ())
</MACRO>
<MACRO>
<NAME>GLG_LINE_GRAPH</NAME>
#define GLG_LINE_GRAPH(obj)			(G_TYPE_CHECK_INSTANCE_CAST ((obj), GLG_TYPE_LINE_GRAPH, GlgLineGraph))
</MACRO>
<MACRO>
<NAME>GLG_IS_LINE_GRAPH</NAME>
#define GLG_IS_LINE_GRAPH(obj)		(G_TYPE_CHECK_INSTANCE_TYPE ((obj), GLG_TYPE_LINE_GRAPH))
</MACRO>
<FUNCTION>
<NAME>glg_line_graph_new</NAME>
<RETURNS>GlgLineGraph  * </RETURNS>
const gchar *first_property_name, ...
</FUNCTION>
<FUNCTION>
<NAME>glg_line_graph_get_type</NAME>
<RETURNS>GType     </RETURNS>
void
</FUNCTION>
<FUNCTION>
<NAME>glg_line_graph_redraw</NAME>
<RETURNS>void  		</RETURNS>
GlgLineGraph *graph
</FUNCTION>
<FUNCTION>
<NAME>glg_line_graph_chart_get_elements</NAME>
<RETURNS>GLGElementID  </RETURNS>
 GlgLineGraph *graph
</FUNCTION>
<FUNCTION>
<NAME>glg_line_graph_chart_set_elements</NAME>
<RETURNS>void  		</RETURNS>
 GlgLineGraph *graph, GLGElementID element
</FUNCTION>
<FUNCTION>
<NAME>glg_line_graph_chart_set_text</NAME>
<RETURNS>gboolean  	</RETURNS>
GlgLineGraph *graph, GLGElementID element, const gchar *pch_text
</FUNCTION>
<FUNCTION>
<NAME>glg_line_graph_chart_set_color</NAME>
<RETURNS>gboolean  	</RETURNS>
GlgLineGraph *graph, GLGElementID element, const gchar *pch_color
</FUNCTION>
<FUNCTION>
<NAME>glg_line_graph_chart_set_ranges</NAME>
<RETURNS>void  		</RETURNS>
GlgLineGraph *graph, gint x_tick_minor, gint x_tick_major, gint x_scale_min,  gint x_scale_max, gint y_tick_minor, gint y_tick_major, gint y_scale_min,  gint y_scale_max
</FUNCTION>
<FUNCTION>
<NAME>glg_line_graph_chart_set_x_ranges</NAME>
<RETURNS>void  </RETURNS>
GlgLineGraph *graph, gint x_tick_minor, gint x_tick_major, gint x_scale_min,  gint x_scale_max
</FUNCTION>
<FUNCTION>
<NAME>glg_line_graph_chart_set_y_ranges</NAME>
<RETURNS>void  </RETURNS>
GlgLineGraph *graph, gint y_tick_minor, gint y_tick_major, gint y_scale_min,  gint y_scale_max
</FUNCTION>
<FUNCTION>
<NAME>glg_line_graph_data_series_add</NAME>
<RETURNS>gint  		</RETURNS>
GlgLineGraph *graph, const gchar *pch_legend_text, const gchar *pch_color_text
</FUNCTION>
<FUNCTION>
<NAME>glg_line_graph_data_series_add_value</NAME>
<RETURNS>gboolean  	</RETURNS>
GlgLineGraph *graph, gint i_series_number, gdouble y_value
</FUNCTION>
<STRUCT>
<NAME>GlgLineGraphPrivate</NAME>
</STRUCT>
